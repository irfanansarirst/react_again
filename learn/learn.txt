Great 👍 Let’s continue with more **ES6+ JavaScript concepts** that are *very important* before diving deeper into **React**. These features make code **cleaner, modular, and easier to handle asynchronous tasks**.

---

# 📘 Chapter 2 (Continued): Modern JavaScript (ES6+)

---

## § 2.5 Spread and Rest Operators

Both use the same syntax (`...`), but their purpose differs based on **where they are used**.

---

### 🔹 Spread Operator (`...`)

The **spread operator** is used to **expand/unpack elements** from an array, object, or iterable.

#### ✅ Array Example

```js
const numbers = [1, 2, 3];
const moreNumbers = [...numbers, 4, 5];

console.log(moreNumbers); // [1, 2, 3, 4, 5]
```

#### ✅ Object Example

```js
const student = { name: "Irfan", age: 21 };
const updatedStudent = { ...student, branch: "CSE" };

console.log(updatedStudent); // { name: "Irfan", age: 21, branch: "CSE" }
```

👉 **In React:**

* Used for copying state without mutation.

```js
setState({ ...state, age: 22 });
```

---

### 🔹 Rest Operator (`...`)

The **rest operator** collects multiple values into a single variable.

#### ✅ Function Parameters

```js
function sum(...nums) {
  return nums.reduce((a, b) => a + b, 0);
}

console.log(sum(1, 2, 3, 4)); // 10
```

#### ✅ Object/Array Destructuring

```js
const { name, ...rest } = { name: "Aisha", age: 22, branch: "CSE" };
console.log(name); // Aisha
console.log(rest); // { age: 22, branch: "CSE" }
```

👉 **Difference:**

* **Spread** → Expands data.
* **Rest** → Collects data.

---

## § 2.6 Modules (import/export)

Before ES6, JavaScript had no built-in module system. ES6 introduced `import` and `export` for modular programming.

### 🔹 Exporting

You can export variables, functions, or classes.

#### ✅ Named Export

```js
// math.js
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;
```

#### ✅ Default Export

```js
// greet.js
export default function greet(name) {
  return `Hello, ${name}!`;
}
```

---

### 🔹 Importing

#### ✅ Import Named Exports

```js
import { add, subtract } from './math.js';

console.log(add(5, 3));      // 8
console.log(subtract(5, 3)); // 2
```

#### ✅ Import Default Export

```js
import greet from './greet.js';

console.log(greet("Irfan")); // Hello, Irfan!
```

👉 **Why Useful in React?**

* Every React component is a separate file (module).
* Components are shared using `export` and `import`.

Example:

```js
// Welcome.js
export default function Welcome() {
  return <h1>Welcome to React!</h1>;
}

// App.js
import Welcome from './Welcome';
```

---

## § 2.7 Promises and Async/Await

JavaScript is **asynchronous** (non-blocking). Instead of waiting for one task to finish, it can continue executing other tasks. Promises and `async/await` are tools to handle this.

---

### 🔹 Promises

A **Promise** represents a value that may be available **now, later, or never**.

States of a Promise:

1. **Pending** → initial state
2. **Fulfilled** → operation completed successfully
3. **Rejected** → operation failed

#### ✅ Example

```js
const fetchData = new Promise((resolve, reject) => {
  let success = true;
  if (success) {
    resolve("Data fetched successfully!");
  } else {
    reject("Error fetching data.");
  }
});

fetchData
  .then((result) => console.log(result))  // runs if resolved
  .catch((error) => console.log(error)); // runs if rejected
```

---

### 🔹 Async/Await

`async` and `await` make asynchronous code look **synchronous**.

* `async` → declares a function that returns a Promise.
* `await` → pauses execution until the Promise resolves.

#### ✅ Example with Fetch API

```js
async function getUser() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/users/1");
    const user = await response.json();
    console.log(user.name);
  } catch (error) {
    console.log("Error:", error);
  }
}

getUser();
```

👉 **Why Useful in React?**

* React apps often fetch data from APIs.
* `async/await` makes API code easier to read and maintain.

---

✅ **By the end of this section, engineering students will know:**

* How `spread` and `rest` operators simplify handling arrays, objects, and parameters.
* How to split code into **modules** using `import/export` (essential for React components).
* How to handle **asynchronous tasks** (like API calls) with Promises and `async/await`.

---

Would you like me to also create a **side-by-side React example** showing how `spread`, `import/export`, and `async/await` are used **inside a real component** (e.g., fetching API data and updating state)?
